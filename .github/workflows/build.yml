name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Run static analysis
      run: dotnet build --configuration Release --verbosity normal --property:TreatWarningsAsErrors=true
      
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test --no-build --verbosity normal --configuration Release --filter "Category!=Integration"
      
    - name: Run integration tests
      run: dotnet test --no-build --verbosity normal --configuration Release --filter "Category=Integration"
      
    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
        reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage/report -reporttypes:Html
        
    - name: Check coverage threshold
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Extract coverage percentage and check if it meets minimum threshold
        COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' ./coverage/**/coverage.cobertura.xml | head -1)
        COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d. -f1)
        echo "Current coverage: ${COVERAGE_PERCENT}%"
        if [ "$COVERAGE_PERCENT" -lt 60 ]; then
          echo "‚ùå Coverage ${COVERAGE_PERCENT}% is below minimum threshold of 60%"
          exit 1
        else
          echo "‚úÖ Coverage ${COVERAGE_PERCENT}% meets minimum threshold"
        fi
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/**/coverage.cobertura.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        
    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/report/
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore solution
      run: dotnet restore EventSourcingBankingDemo.sln
      
    - name: Run security audit
      run: dotnet list EventSourcingBankingDemo.sln package --vulnerable --include-transitive
      
    - name: Run dependency check
      run: dotnet restore EventSourcingBankingDemo.sln --force-evaluate
      
  api-documentation:
    name: API Documentation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build WebApi project
      run: dotnet build src/WebApi --configuration Release
      
    - name: Check XML documentation generation
      run: |
        if [ ! -f "src/WebApi/bin/Release/net8.0/WebApi.xml" ]; then
          echo "‚ùå XML documentation not generated"
          exit 1
        else
          echo "‚úÖ XML documentation generated successfully"
        fi
        
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan, api-documentation]
    
    steps:
    - name: Quality Gate Passed
      run: |
        echo "üéâ All quality checks passed!"
        echo "‚úÖ Code formatting and static analysis"
        echo "‚úÖ Unit and integration tests"
        echo "‚úÖ Code coverage threshold met"
        echo "‚úÖ Security scan completed"
        echo "‚úÖ API documentation generated"
        echo ""
        echo "Ready for merge to main branch! üöÄ"  